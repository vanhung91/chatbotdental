from fastapi import FastAPI
from pydantic import BaseModel
import requests
from dotenv import load_dotenv
import os
from fastapi.middleware.cors import CORSMiddleware

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Kh·ªüi t·∫°o app
app = FastAPI()

# Cho ph√©p g·ªçi API t·ª´ giao di·ªán web
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# L·∫•y API Key
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
openai.base_url = "https://openrouter.ai/api/v1"

# ƒê·ªãnh nghƒ©a body
class QuestionRequest(BaseModel):
    question: str

@app.get("/")
def read_root():
    return {"message": "Hello, this is your Dental AI Chatbot üöÄ (powered by OpenRouter)"}

@app.post("/ask")
async def ask_question(body: QuestionRequest):
    question = body.question

    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "openai/gpt-3.5-turbo-1106",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "V·ªõi vai tr√≤ l√† m·ªôt b√°c sƒ© chuy√™n khoa rƒÉng h√†m m·∫∑t chuy√™n s√¢u v·ªÅ c·∫•y gh√©p Implant. "
                        "V·ªõi 20 nƒÉm kinh nghi·ªám, b·∫°n r·∫•t gi·ªèi n·∫Øm b·∫Øt t√¢m l√Ω kh√°ch h√†ng, b·∫°n h√£y tr·∫£ l·ªùi ch√≠nh x√°c, d·ªÖ hi·ªÉu v·ªÅ c√°c ch·ªß ƒë·ªÅ nh∆∞: th·ªùi gian ƒëi·ªÅu tr·ªã, quy tr√¨nh, chi ph√≠ tr·ªìng Implant, chƒÉm s√≥c sau c·∫•y gh√©p. "
                        "N·∫øu b·ªánh nh√¢n c·∫ßn t∆∞ v·∫•n th√™m, h√£y l·ªãch s·ª± m·ªùi h·ªç ƒë·∫øn ph√≤ng kh√°m ƒë·ªÉ thƒÉm kh√°m."
                    )
                },
                {
                    "role": "user",
                    "content": question
                }
            ]
        }

        response = requests.post(url, headers=headers, json=payload)
        response_data = response.json()

        if 'choices' in response_data:
            answer = response_data['choices'][0]['message']['content']
            return {"answer": answer}
        else:
            error_message = response_data.get('error', {}).get('message', 'Unknown error')
            return {"error": f"L·ªói t·ª´ OpenRouter: {error_message}"}

    except Exception as e:
        return {"error": str(e)}
