from fastapi import FastAPI
from pydantic import BaseModel
import requests
import os
from fastapi.middleware.cors import CORSMiddleware

# Kh·ªüi t·∫°o app
app = FastAPI()

# Cho ph√©p g·ªçi API t·ª´ web
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# L·∫•y API Key
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# ƒê·ªãnh nghƒ©a body
class QuestionRequest(BaseModel):
    question: str

@app.get("/")
def read_root():
    return {"message": "Hello, this is your Dental AI Chatbot üöÄ (powered by OpenRouter)"}

@app.post("/ask")
async def ask_question(body: QuestionRequest):
    question = body.question

    if not OPENROUTER_API_KEY:
        return {"error": "API Key kh√¥ng t·ªìn t·∫°i tr√™n server"}

    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://yourwebsite.com/",  # B·∫°n c√≥ th·ªÉ ƒë·ªïi th√†nh website b·∫°n (t·∫°m ƒë·ªÉ v·∫≠y c≈©ng ƒë∆∞·ª£c)
            "X-Title": "Dental Chatbot Project"
        }
        payload = {
            "model": "openai/gpt-3.5-turbo-1106",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "B·∫°n l√† b√°c sƒ© chuy√™n c·∫•y gh√©p Implant, h√£y tr·∫£ l·ªùi ch√≠nh x√°c, d·ªÖ hi·ªÉu c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn tr·ªìng Implant."
                    )
                },
                {
                    "role": "user",
                    "content": question
                }
            ]
        }

        response = requests.post(url, headers=headers, json=payload)
        response_data = response.json()

        if 'choices' in response_data:
            answer = response_data['choices'][0]['message']['content']
            return {"answer": answer}
        else:
            error_message = response_data.get('error', {}).get('message', 'Unknown error')
            return {"error": f"L·ªói t·ª´ OpenRouter: {error_message}"}

    except Exception as e:
        return {"error": str(e)}
